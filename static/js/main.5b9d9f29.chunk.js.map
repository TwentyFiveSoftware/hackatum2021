{"version":3,"sources":["styles/App.module.scss","styles/Page.module.scss","styles/Chart.module.scss","styles/Square.module.scss","components/Chart.tsx","components/BarChart.tsx","components/LineChart.tsx","components/PieChart.tsx","components/Statement.tsx","components/SquareAnimation.tsx","components/Page.tsx","data/pages.ts","App.tsx","index.tsx","styles/Statement.module.scss"],"names":["module","exports","ChartType","BarChart","values","labels","opts","renderer","style","height","width","option","xAxis","type","data","axisLabel","fontSize","fontFamily","color","axisLine","lineStyle","axisTick","show","yAxis","series","map","v","i","value","itemStyle","colorScheme","slice","length","colorBy","grid","left","top","right","animationDelay","index","LineChart","areaStyle","opacity","symbol","PieChart","name","radius","label","Chart","chartType","className","styles","chart","duration","easing","translateY","BAR","LINE","PIE","Statement","text","animationEnded","onAnimationEnd","children","statement","statementInner","delay","_","complete","anime","targets","paddingTop","scale","split","word","startsWith","substring","SquareAnimation","pageAnimationStarted","wrapper","keyframes","stagger","update","animation","progress","translateX","backgroundColor","Page","page","onPageEnd","useState","showChart","setShowChart","useEffect","pages","App","currentPageIndex","setCurrentPageIndex","currentIndex","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b9d9f29.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__1jdCp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"Page_page__3rKmh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart\":\"Chart_chart__2yQPR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Square_wrapper__21vRP\"};","import React from 'react';\nimport Anime from 'react-anime';\nimport styles from '../styles/Chart.module.scss';\nimport BarChart from './BarChart';\nimport LineChart from './LineChart';\nimport PieChart from './PieChart';\n\nexport enum ChartType {\n    BAR,\n    LINE,\n    PIE,\n}\n\ninterface Props {\n    chartType: ChartType,\n    values: number[];\n    labels: string[];\n}\n\nconst Chart = ({ chartType, values, labels }: Props) => {\n    return (\n        <div className={styles.chart}>\n            <Anime\n                duration={1000}\n                easing={'easeOutCubic'}\n                opacity={[0, 1]}\n                translateY={[50, 0]}\n            >\n                {chartType === ChartType.BAR ? (\n                    <BarChart values={values} labels={labels} />\n\n                ) : chartType === ChartType.LINE ? (\n                    <LineChart values={values} labels={labels} />\n\n                ) : chartType === ChartType.PIE ? (\n                    <PieChart values={values} labels={labels} />\n\n                ) : (\n                    <></>\n                )}\n            </Anime>\n        </div>\n    );\n};\n\nexport default Chart;\n","import React from 'react';\nimport ReactECharts from 'echarts-for-react';\nimport { colorScheme } from '../App';\n\ninterface Props {\n    values: number[];\n    labels: string[];\n}\n\nconst BarChart = ({ values, labels }: Props) => {\n    return (\n        <ReactECharts\n            opts={{ renderer: 'svg' }}\n            style={{\n                height: '30rem',\n                width: '100%',\n            }}\n            option={{\n                xAxis: {\n                    type: 'category',\n                    data: labels,\n                    axisLabel: {\n                        fontSize: 15,\n                        fontFamily: 'Inter',\n                        color: '#ABB2BF',\n                    },\n                    axisLine: {\n                        lineStyle: {\n                            type: 'dashed',\n                            color: '#4F575F',\n                        },\n                    },\n                    axisTick: {\n                        show: false,\n                    },\n                },\n                yAxis: {\n                    show: false,\n                },\n                series: [\n                    {\n                        data: values.map((v, i) => ({\n                            value: v,\n                            itemStyle: {\n                                color: colorScheme.slice(0, values.length)[values.length - i - 1],\n                            },\n                        })),\n                        type: 'bar',\n                        colorBy: 'data',\n                    },\n                ],\n                grid: {\n                    left: 0,\n                    top: 0,\n                    right: 0,\n                },\n                animationDelay: (index: number) => 700 + index * 100,\n            }}\n        />\n    );\n};\n\nexport default BarChart;\n","import React from 'react';\nimport ReactECharts from 'echarts-for-react';\nimport { colorScheme } from '../App';\n\ninterface Props {\n    values: number[];\n    labels: string[];\n}\n\nconst LineChart = ({ values, labels }: Props) => {\n    return (\n        <ReactECharts\n            opts={{ renderer: 'svg' }}\n            style={{\n                height: '30rem',\n                width: '100%',\n            }}\n            option={{\n                xAxis: {\n                    type: 'category',\n                    data: labels,\n                    axisLabel: {\n                        fontSize: 15,\n                        fontFamily: 'Inter',\n                        color: '#ABB2BF',\n                    },\n                    axisLine: {\n                        lineStyle: {\n                            type: 'dashed',\n                            color: '#4F575F',\n                        },\n                    },\n                    axisTick: {\n                        show: false,\n                    },\n                },\n                yAxis: {\n                    show: false,\n                },\n                series: [\n                    {\n                        data: values,\n                        type: 'line',\n                        areaStyle: {\n                            color: colorScheme[1],\n                            opacity: 0.1,\n                        },\n                        lineStyle: {\n                            color: colorScheme[0],\n                        },\n                        itemStyle: {\n                            color: colorScheme[0],\n                        },\n                        symbol: 'circle',\n                    },\n                ],\n                grid: {\n                    left: 0,\n                    top: 0,\n                    right: 0,\n                },\n                animationDelay: (index: number) => 700 + index * 50,\n            }}\n        />\n    );\n};\n\nexport default LineChart;\n","import React from 'react';\nimport ReactECharts from 'echarts-for-react';\nimport { colorScheme } from '../App';\n\ninterface Props {\n    values: number[];\n    labels: string[];\n}\n\nconst PieChart = ({ values, labels }: Props) => {\n    return (\n        <ReactECharts\n            opts={{ renderer: 'svg' }}\n            style={{\n                height: '40rem',\n                width: '100%',\n            }}\n            option={{\n                series: [\n                    {\n                        data: values.map((v, i) => ({\n                            value: v,\n                            name: labels[i],\n                            itemStyle: {\n                                color: colorScheme[i],\n                            },\n                        })),\n                        // roseType: 'radius',\n                        type: 'pie',\n                        colorBy: 'data',\n                        radius: '65%',\n                    },\n                ],\n                label: {\n                    fontSize: 15,\n                    fontFamily: 'Inter',\n                    color: '#ABB2BF',\n                },\n                grid: {\n                    left: 0,\n                    top: 0,\n                    right: 0,\n                },\n                animationDelay: (index: number) => 700 + index * 100,\n            }}\n        />\n    );\n};\n\nexport default PieChart;\n","import React from 'react';\nimport Anime, { anime } from 'react-anime';\nimport styles from '../styles/Statement.module.scss';\n\ninterface Props {\n    text: string;\n    animationEnded: boolean;\n    onAnimationEnd: () => void;\n}\n\nconst Statement: React.FC<Props> = ({ text, animationEnded, onAnimationEnd, children }) => {\n    return (\n        <div className={styles.statement + ' statement'}>\n            <div className={styles.statementInner + ' statementInner'}>\n                <Anime\n                    duration={500}\n                    delay={(_: never, i: number) => 150 * i}\n                    easing={'easeOutCubic'}\n                    translateY={[-20, 0]}\n                    opacity={'100%'}\n                    complete={(_: never) => {\n                        if (animationEnded) return;\n\n                        anime({\n                            targets: '.statementInner',\n                            easing: 'easeOutCubic',\n                            duration: 1000,\n                            paddingTop: [0, 80],\n                            scale: [1.3, 1],\n                        });\n\n                        onAnimationEnd();\n                    }}\n                >\n                    {text.split(' ').map((word, index) =>\n                        word.startsWith('*') ? (\n                            <b key={index}>\n                                {word.substring(1)}\n                            </b>\n                        ) : (\n                            <span key={index}>{word}</span>\n                        ),\n                    )}\n                </Anime>\n            </div>\n\n            {children}\n        </div>\n    );\n};\n\nexport default Statement;\n","import React from 'react';\nimport Anime, { anime } from 'react-anime';\nimport styles from '../styles/Square.module.scss';\nimport { colorScheme } from '../App';\n\ninterface Props {\n    onAnimationEnd: () => void;\n}\n\nconst SquareAnimation = ({ onAnimationEnd }: Props) => {\n    let pageAnimationStarted = false;\n\n    return (\n        <div className={styles.wrapper}>\n            <Anime\n                duration={7000}\n                delay={(_: never, i: number) => 1500 + 150 * i}\n                easing={'easeInOutCubic'}\n                keyframes={[\n                    { left: anime.stagger(['95%', '100%']), opacity: 1 },\n                    { left: anime.stagger(['5%', '0%']) },\n                    { left: '180%' },\n                ]}\n                complete={() => onAnimationEnd()}\n                update={(animation: { progress: number }) => {\n                    if (animation.progress < 75 || pageAnimationStarted) return;\n                    pageAnimationStarted = true;\n\n                    anime({\n                        targets: '.page',\n                        duration: 1000,\n                        easing: 'easeInOutCubic',\n                        opacity: [1, 0],\n                        translateX: ['0%', '50%'],\n                    });\n                }}\n            >\n                {colorScheme.map((color, index) => (\n                    <div style={{ backgroundColor: color }} key={index} />\n                ))}\n            </Anime>\n        </div>\n    );\n};\n\nexport default SquareAnimation;\n","import React, { useEffect, useState } from 'react';\nimport styles from '../styles/Page.module.scss';\nimport Chart from './Chart';\nimport Statement from './Statement';\nimport SquareAnimation from './SquareAnimation';\nimport type { IPage } from '../App';\n\ninterface Props {\n    page: IPage,\n    onPageEnd: () => void;\n}\n\nconst Page = ({ page, onPageEnd }: Props) => {\n    const [showChart, setShowChart] = useState<boolean>(false);\n\n    useEffect(() => {\n        setShowChart(false);\n    }, [page]);\n\n    return (\n        <div className={styles.page + ' page'}>\n            {showChart && <Chart chartType={page.chartType} values={page.values} labels={page.labels} />}\n            <Statement text={page.statement} animationEnded={showChart} onAnimationEnd={() => setShowChart(true)}>\n                {showChart && <SquareAnimation onAnimationEnd={onPageEnd} />}\n            </Statement>\n        </div>\n    );\n};\n\nexport default Page;\n","import { ChartType } from '../components/Chart';\nimport { IPage } from '../App';\n\nexport const pages: IPage[] = [\n    {\n        statement: '*Prices in 2019 were on average *41% *higher than in 2018. Therefore the amount of sales was slightly lower.',\n        chartType: ChartType.BAR,\n        values: [12.144842, 17.290347, 24.388591],\n        labels: ['2017', '2018', '2019'],\n    },\n    {\n        statement: 'On 2019/08/20, the store made *6.7 *times more revenue than on most other days.',\n        chartType: ChartType.BAR,\n        values: [564.82, 1750.71, 1661.05, 761.89, 340.97, 7232.69],\n        labels: ['2019/08/15', '2019/08/16', '2019/08/17', '2019/08/18', '2019/08/19', '2019/08/20'],\n    },\n    {\n        statement: 'Average *revenue *per *day has increased *25% yearly.',\n        chartType: ChartType.LINE,\n        values: [1.735577, 2.049807, 2.581987],\n        labels: ['2017', '2018', '2019'],\n    },\n    {\n        statement: '*October 2019 has been *5% better than *September in terms of *revenue.',\n        chartType: ChartType.PIE,\n        values: [7339, 7713],\n        labels: ['Sep', 'Oct'],\n    },\n    {\n        statement: 'Revenue in *October has *increased by an average of *10% over the years.',\n        chartType: ChartType.BAR,\n        values: [6366, 7339, 7713],\n        labels: ['2017', '2018', '2019'],\n    },\n    {\n        statement: 'Mean *sales were *down by more than *6% than last year. Yet *revenue was *higher due to the *increased *prices.',\n        chartType: ChartType.BAR,\n        values: [0.435598, 0.40645],\n        labels: ['2018', '2019'],\n    },\n    {\n        statement: '*Revenue increased more than *9% last year.',\n        chartType: ChartType.BAR,\n        values: [175934.93, 193065.48],\n        labels: ['2018', '2019'],\n    },\n    {\n        statement: '*Max *revenue on one day was *41% higher in year 2019.',\n        chartType: ChartType.BAR,\n        values: [3517.2, 4686.62, 6640.93],\n        labels: ['2017', '2018', '2019'],\n    },\n];","import React, { useState } from 'react';\nimport styles from './styles/App.module.scss';\nimport { ChartType } from './components/Chart';\nimport Page from './components/Page';\nimport { pages } from './data/pages';\n\nexport interface IPage {\n    statement: string,\n    chartType: ChartType,\n    values: number[],\n    labels: string[],\n}\n\nexport const colorScheme: string[] = ['#893448', '#d95850', '#eb8146', '#ffb248', '#f2d643', '#ebdba4'];\n\nconst App = () => {\n    const [currentPageIndex, setCurrentPageIndex] = useState<number>(0);\n\n    const nextPage = () => {\n        let currentIndex = currentPageIndex;\n        setCurrentPageIndex(-1);\n        setCurrentPageIndex((currentIndex + 1) % pages.length);\n    };\n\n    return (\n        <div className={styles.wrapper}>\n            {currentPageIndex >= 0 && <Page page={pages[currentPageIndex]} onPageEnd={nextPage} />}\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statement\":\"Statement_statement__19rVa\",\"statementInner\":\"Statement_statementInner__2u_wg\"};"],"sourceRoot":""}